{"remainingRequest":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\src\\views\\login.vue?vue&type=style&index=0&id=7589b93f&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\src\\views\\login.vue","mtime":1704874133934},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0ICJ+QC9hc3NldHMvc3R5bGVzL2xvZ2luLnNjc3MiOw0KDQoNCi5vYXV0aC1sb2dpbiB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGN1cnNvcjpwb2ludGVyOw0KfQ0KLm9hdXRoLWxvZ2luLWl0ZW0gew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBtYXJnaW4tcmlnaHQ6IDEwcHg7DQp9DQoub2F1dGgtbG9naW4taXRlbSBpbWcgew0KICBoZWlnaHQ6IDI1cHg7DQogIHdpZHRoOiAyNXB4Ow0KfQ0KLm9hdXRoLWxvZ2luLWl0ZW0gc3Bhbjpob3ZlciB7DQogIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIHJlZDsNCiAgY29sb3I6IHJlZDsNCn0NCi5zbXMtbG9naW4tbW9iaWxlLWNvZGUtcHJlZml4IHsNCiAgOmRlZXAoLmVsLWlucHV0X19wcmVmaXgpIHsNCiAgICB0b3A6IDIyJTsNCiAgfQ0KfQ0K"},{"version":3,"sources":["login.vue"],"names":[],"mappings":";AAmSA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"login.vue","sourceRoot":"src/views","sourcesContent":["<template xmlns=\"\">\r\n  <div class=\"container\">\r\n    <!-- 登录区域 -->\r\n    <div class=\"content\">\r\n      <!-- 配图 -->\r\n      <div class=\"pic\"></div>\r\n      <!-- 表单 -->\r\n      <div class=\"field\">\r\n        <!-- [移动端]标题 -->\r\n        <h2 class=\"mobile-title\">\r\n          <h3 class=\"title\">QRCODE</h3>\r\n        </h2>\r\n\r\n        <!-- 表单 -->\r\n        <div class=\"form-cont\">\r\n          <el-tabs class=\"form\" v-model=\"loginForm.loginType\" style=\" float:none;\">\r\n            <el-tab-pane label=\"Email Verification Login\" name=\"sms\">\r\n            </el-tab-pane>\r\n        \r\n          </el-tabs>\r\n          <div>\r\n            <el-form ref=\"loginForm\" :model=\"loginForm\" :rules=\"LoginRules\" class=\"login-form\">\r\n\r\n              <!-- 邮箱验证码登录 -->\r\n              <div v-if=\"loginForm.loginType === 'sms'\">\r\n                <el-form-item prop=\"email\">\r\n                  <el-input v-model=\"loginForm.email\" type=\"text\" auto-complete=\"off\" placeholder=\"Enter your email\">\r\n                    <svg-icon slot=\"prefix\" icon-class=\"email\" class=\"el-input__icon input-icon\"/>\r\n                  </el-input>\r\n                </el-form-item>\r\n                <el-form-item prop=\"emailCode\">\r\n                  <el-input v-model=\"loginForm.emailCode\" type=\"text\" auto-complete=\"off\" placeholder=\"Email Verification Code\"\r\n                            class=\"sms-login-mobile-code-prefix\">\r\n                    <template>\r\n                      <svg-icon slot=\"prefix\" icon-class=\"email\" class=\"el-input__icon input-icon\"/>\r\n                    </template>\r\n                    <template slot=\"append\">\r\n                      <span v-if=\"mobileCodeTimer <= 0\" class=\"getMobileCode\" @click=\"getSmsCode\" style=\"cursor: pointer;\">Get verification code</span>\r\n                      <span v-if=\"mobileCodeTimer > 0\" class=\"getMobileCode\">{{ mobileCodeTimer }}seconds</span>\r\n                    </template>\r\n                  </el-input>\r\n                </el-form-item>\r\n              </div>\r\n\r\n              <!-- 下方的登录按钮 -->\r\n              <el-form-item style=\"width:100%;\">\r\n                <el-button :loading=\"loading\" size=\"medium\" type=\"primary\" style=\"width:100%;\"\r\n                    @click.native.prevent=\"SmsLogin\">\r\n                  <span v-if=\"!loading\">Log In</span>\r\n                  <span v-else>Logging In...</span>\r\n                </el-button>\r\n              </el-form-item>\r\n\r\n            </el-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 图形验证码 -->\r\n<!--    <Verify ref=\"verify\" :captcha-type=\"'blockPuzzle'\" :img-size=\"{width:'400px',height:'200px'}\"-->\r\n<!--            @success=\"handleLogin\" />-->\r\n\r\n    <!-- footer -->\r\n    <div class=\"footer\">\r\n      Copyright © 2023-2024 QRCODE All Rights Reserved.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {sendSmsCode, smsLogin} from \"@/api/login\";\r\nimport {getTenantIdByName} from \"@/api/system/tenant\";\r\nimport {SystemUserSocialTypeEnum} from \"@/utils/constants\";\r\nimport {getCaptchaEnable, getTenantEnable} from \"@/utils/ruoyi\";\r\nimport {\r\n  getPassword,\r\n  getRememberMe, getTenantName,\r\n  getUsername,\r\n  removePassword, removeRememberMe, removeTenantName,\r\n  removeUsername,\r\n  setPassword, setRememberMe, setTenantId, setTenantName, setToken,\r\n  setUsername\r\n} from \"@/utils/auth\";\r\n\r\nimport Verify from '@/components/Verifition/Verify';\r\nimport {resetUserPwd} from \"@/api/system/user\";\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  components: {\r\n    Verify\r\n  },\r\n  data() {\r\n    return {\r\n      codeUrl: \"\",\r\n      captchaEnable: false,\r\n      tenantEnable: false,\r\n      mobileCodeTimer: 0,\r\n      loginForm: {\r\n        loginType: \"sms\",\r\n        username: \"admin\",\r\n        password: \"admin123\",\r\n        captchaVerification: \"\",\r\n        email: \"\",\r\n        emailCode: \"\",\r\n        rememberMe: false,\r\n        tenantName: \"QRCODE\",\r\n      },\r\n      scene: 21,\r\n\r\n      LoginRules: {\r\n        username: [\r\n          {required: true, trigger: \"blur\", message: \"Username cannot be empty\"}\r\n        ],\r\n        password: [\r\n          {required: true, trigger: \"blur\", message: \"Password cannot be empty\"}\r\n        ],\r\n        email: [\r\n          {required: true, trigger: \"blur\", message: \"Email cannot be empty\"},\r\n          {\r\n            validator: function (rule, value, callback) {\r\n              if (/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value) === false) {\r\n                callback(new Error(\"Invalid email format\"));\r\n              } else {\r\n                callback();\r\n              }\r\n            }, trigger: \"blur\"\r\n          }\r\n        ]\r\n      },\r\n      loading: false,\r\n      redirect: undefined,\r\n      // 枚举\r\n      // SysUserSocialTypeEnum: SystemUserSocialTypeEnum,\r\n    };\r\n  },\r\n  created() {\r\n    // 租户开关\r\n    // this.tenantEnable = getTenantEnable();\r\n    // if (this.tenantEnable) {\r\n    //   getTenantIdByName(this.loginForm.tenantName).then(res => { // 设置租户\r\n    //     const tenantId = res.data;\r\n    //     if (tenantId && tenantId >= 0) {\r\n    //       setTenantId(tenantId)\r\n    //     }\r\n    //   });\r\n    // }\r\n    // 验证码开关\r\n    // this.captchaEnable = getCaptchaEnable();\r\n    // 重定向地址\r\n    // this.redirect = this.$route.query.redirect ? decodeURIComponent(this.$route.query.redirect) : undefined;\r\n    // this.getCookie();\r\n  },\r\n  methods: {\r\n    // 邮箱登录\r\n    SmsLogin() {\r\n      const email = this.loginForm.email.trim()\r\n      const emailCode = this.loginForm.emailCode\r\n      return new Promise((resolve, reject) => {\r\n        smsLogin(email,emailCode).then(res => {\r\n          console.log(res)\r\n          console.log(res.msg)\r\n          if (res.msg === 'SUCCESS'){\r\n            this.$router.push({path:'/qrcode',query:{email}});\r\n\r\n          }else {\r\n            console.error(\"Incorrect verification code. Please retrieve it again~\")\r\n            this.$notify.error({\r\n              title: 'Error',\r\n              message: 'Incorrect verification code. Please retrieve it again.~'\r\n            });\r\n          }\r\n\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n    getCode() {\r\n      // 情况一，未开启：则直接登录\r\n      if (!this.captchaEnable) {\r\n        this.handleLogin({})\r\n        return;\r\n      }\r\n\r\n      // 情况二，已开启：则展示验证码；只有完成验证码的情况，才进行登录\r\n      // 弹出验证码\r\n      this.$refs.verify.show()\r\n    },\r\n    getCookie() {\r\n      const username = getUsername();\r\n      const password = getPassword();\r\n      const rememberMe = getRememberMe();\r\n      const tenantName = getTenantName();\r\n      this.loginForm = {\r\n        ...this.loginForm,\r\n        username: username ? username : this.loginForm.username,\r\n        password: password ? password : this.loginForm.password,\r\n        rememberMe: rememberMe ? getRememberMe() : false,\r\n        tenantName: tenantName ? tenantName : this.loginForm.tenantName,\r\n      };\r\n    },\r\n    handleLogin(captchaParams) {\r\n      this.$refs.loginForm.validate(valid => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          // // 设置 Cookie\r\n          // if (this.loginForm.rememberMe) {\r\n          //   setUsername(this.loginForm.username)\r\n          //   setPassword(this.loginForm.password)\r\n          //   setRememberMe(this.loginForm.rememberMe)\r\n          //   setTenantName(this.loginForm.tenantName)\r\n          // } else {\r\n          //   removeUsername()\r\n          //   removePassword()\r\n          //   removeRememberMe()\r\n          //   removeTenantName()\r\n          // }\r\n          this.loginForm.captchaVerification = captchaParams.captchaVerification\r\n          // 发起登陆\r\n          // console.log(\"发起登录\", this.loginForm);\r\n          this.$store.dispatch(this.loginForm.loginType === \"sms\" ? \"SmsLogin\" : \"Login\", this.loginForm).then(() => {\r\n            this.$router.push({path: this.redirect || \"/\"}).catch(() => {\r\n            });\r\n          }).catch(() => {\r\n            this.loading = false;\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    // async doSocialLogin(socialTypeEnum) {\r\n    //   // 设置登录中\r\n    //   this.loading = true;\r\n    //   let tenant = false;\r\n    //   if (this.tenantEnable) {\r\n    //     await this.$prompt('请输入租户名称', \"提示\", {\r\n    //       confirmButtonText: \"确定\",\r\n    //       cancelButtonText: \"取消\"\r\n    //     }).then(async ({value}) => {\r\n    //       await getTenantIdByName(value).then(res => {\r\n    //         const tenantId = res.data;\r\n    //         tenant = true\r\n    //         if (tenantId && tenantId >= 0) {\r\n    //           setTenantId(tenantId)\r\n    //         }\r\n    //       });\r\n    //     }).catch(() => {\r\n    //       // 取消登录按钮 loading状态\r\n    //       this.loading = false;\r\n    //\r\n    //       return false\r\n    //     });\r\n    //   } else {\r\n    //     tenant = true\r\n    //   }\r\n    //  if(tenant){\r\n    //    // 计算 redirectUri\r\n    //    const redirectUri = location.origin + '/social-login?'\r\n    //      + encodeURIComponent('type=' + socialTypeEnum.type + '&redirect=' + (this.redirect || \"/\")); // 重定向不能丢\r\n    //    // const redirectUri = 'http://127.0.0.1:48080/api/gitee/callback';\r\n    //    // const redirectUri = 'http://127.0.0.1:48080/api/dingtalk/callback';\r\n    //    // 进行跳转\r\n    //    socialAuthRedirect(socialTypeEnum.type, encodeURIComponent(redirectUri)).then((res) => {\r\n    //      // console.log(res.url);\r\n    //      window.location.href = res.data;\r\n    //    });\r\n    //  }\r\n    // },\r\n    /** ========== 以下为升级短信登录 ========== */\r\n    getSmsCode() {\r\n      if (this.mobileCodeTimer > 0) return;\r\n      this.$refs.loginForm.validate(valid => {\r\n        if (!valid) return;\r\n        sendSmsCode(this.loginForm.email).then(res => {\r\n          this.$modal.msgSuccess(\"获取验证码成功\")\r\n          this.mobileCodeTimer = 60;\r\n          let msgTimer = setInterval(() => {\r\n            this.mobileCodeTimer = this.mobileCodeTimer - 1;\r\n            if (this.mobileCodeTimer <= 0) {\r\n              clearInterval(msgTimer);\r\n            }\r\n          }, 1000);\r\n        });\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n@import \"~@/assets/styles/login.scss\";\r\n\r\n\r\n.oauth-login {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor:pointer;\r\n}\r\n.oauth-login-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 10px;\r\n}\r\n.oauth-login-item img {\r\n  height: 25px;\r\n  width: 25px;\r\n}\r\n.oauth-login-item span:hover {\r\n  text-decoration: underline red;\r\n  color: red;\r\n}\r\n.sms-login-mobile-code-prefix {\r\n  :deep(.el-input__prefix) {\r\n    top: 22%;\r\n  }\r\n}\r\n</style>\r\n"]}]}