{"remainingRequest":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\src\\components\\bpmnProcessDesigner\\package\\designer\\ProcessViewer.vue?vue&type=style&index=0&id=07dfbc9a&lang=css","dependencies":[{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\src\\components\\bpmnProcessDesigner\\package\\designer\\ProcessViewer.vue","mtime":1704630437688},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoNCi8qKiDlpITnkIbkuK0gKi8NCi5oaWdobGlnaHQtdG9kby5kanMtY29ubmVjdGlvbiA+IC5kanMtdmlzdWFsID4gcGF0aCB7DQogIHN0cm9rZTogIzE4OTBmZiAhaW1wb3J0YW50Ow0KICBzdHJva2UtZGFzaGFycmF5OiA0cHggIWltcG9ydGFudDsNCiAgZmlsbC1vcGFjaXR5OiAwLjIgIWltcG9ydGFudDsNCn0NCi5oaWdobGlnaHQtdG9kby5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpIHsNCiAgZmlsbDogIzE4OTBmZiAhaW1wb3J0YW50Ow0KICBzdHJva2U6ICMxODkwZmYgIWltcG9ydGFudDsNCiAgc3Ryb2tlLWRhc2hhcnJheTogNHB4ICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQp9DQoNCjpkZWVwKC5oaWdobGlnaHQtdG9kby5kanMtY29ubmVjdGlvbiA+IC5kanMtdmlzdWFsID4gcGF0aCkgew0KICBzdHJva2U6ICMxODkwZmYgIWltcG9ydGFudDsNCiAgc3Ryb2tlLWRhc2hhcnJheTogNHB4ICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQogIG1hcmtlci1lbmQ6IHVybCgjc2VxdWVuY2VmbG93LWVuZC1fRTdERkRGLV9FN0RGREYtODAzZzFrZjZ6d3ptY2lnMXkydWxtNWVncik7DQp9DQo6ZGVlcCguaGlnaGxpZ2h0LXRvZG8uZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgxKSkgew0KICBmaWxsOiAjMTg5MGZmICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogIzE4OTBmZiAhaW1wb3J0YW50Ow0KICBzdHJva2UtZGFzaGFycmF5OiA0cHggIWltcG9ydGFudDsNCiAgZmlsbC1vcGFjaXR5OiAwLjIgIWltcG9ydGFudDsNCn0NCg0KLyoqIOmAmui/hyAqLw0KLmhpZ2hsaWdodC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpIHsNCiAgZmlsbDogZ3JlZW4gIWltcG9ydGFudDsNCiAgc3Ryb2tlOiBncmVlbiAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KfQ0KLmhpZ2hsaWdodC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDIpIHsNCiAgZmlsbDogZ3JlZW4gIWltcG9ydGFudDsNCn0NCi5oaWdobGlnaHQuZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gcGF0aCB7DQogIGZpbGw6IGdyZWVuICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogZ3JlZW4gIWltcG9ydGFudDsNCn0NCi5oaWdobGlnaHQuZGpzLWNvbm5lY3Rpb24gPiAuZGpzLXZpc3VhbCA+IHBhdGggew0KICBzdHJva2U6IGdyZWVuICFpbXBvcnRhbnQ7DQp9DQoNCi5oaWdobGlnaHQ6bm90KC5kanMtY29ubmVjdGlvbikgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpIHsNCiAgZmlsbDogZ3JlZW4gIWltcG9ydGFudDsgLyogY29sb3IgZWxlbWVudHMgYXMgZ3JlZW4gKi8NCn0NCg0KOmRlZXAoLmhpZ2hsaWdodC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpKSB7DQogIGZpbGw6IGdyZWVuICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogZ3JlZW4gIWltcG9ydGFudDsNCiAgZmlsbC1vcGFjaXR5OiAwLjIgIWltcG9ydGFudDsNCn0NCjpkZWVwKC5oaWdobGlnaHQuZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgyKSkgew0KICBmaWxsOiBncmVlbiAhaW1wb3J0YW50Ow0KfQ0KOmRlZXAoLmhpZ2hsaWdodC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiBwYXRoKSB7DQogIGZpbGw6IGdyZWVuICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogZ3JlZW4gIWltcG9ydGFudDsNCn0NCjpkZWVwKC5oaWdobGlnaHQuZGpzLWNvbm5lY3Rpb24gPiAuZGpzLXZpc3VhbCA+IHBhdGgpIHsNCiAgc3Ryb2tlOiBncmVlbiAhaW1wb3J0YW50Ow0KfQ0KDQovKiog5LiN6YCa6L+HICovDQouaGlnaGxpZ2h0LXJlamVjdC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpIHsNCiAgZmlsbDogcmVkICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogcmVkICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQp9DQouaGlnaGxpZ2h0LXJlamVjdC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDIpIHsNCiAgZmlsbDogcmVkICFpbXBvcnRhbnQ7DQp9DQouaGlnaGxpZ2h0LXJlamVjdC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiBwYXRoIHsNCiAgZmlsbDogcmVkICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogcmVkICFpbXBvcnRhbnQ7DQp9DQouaGlnaGxpZ2h0LXJlamVjdC5kanMtY29ubmVjdGlvbiA+IC5kanMtdmlzdWFsID4gcGF0aCB7DQogIHN0cm9rZTogcmVkICFpbXBvcnRhbnQ7DQp9DQoNCi5oaWdobGlnaHQtcmVqZWN0Om5vdCguZGpzLWNvbm5lY3Rpb24pIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgxKSB7DQogIGZpbGw6IHJlZCAhaW1wb3J0YW50OyAvKiBjb2xvciBlbGVtZW50cyBhcyBncmVlbiAqLw0KfQ0KDQo6ZGVlcCguaGlnaGxpZ2h0LXJlamVjdC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpKSB7DQogIGZpbGw6IHJlZCAhaW1wb3J0YW50Ow0KICBzdHJva2U6IHJlZCAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KfQ0KOmRlZXAoLmhpZ2hsaWdodC1yZWplY3QuZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgyKSkgew0KICBmaWxsOiByZWQgIWltcG9ydGFudDsNCn0NCjpkZWVwKC5oaWdobGlnaHQtcmVqZWN0LmRqcy1zaGFwZSAuZGpzLXZpc3VhbCA+IHBhdGgpIHsNCiAgZmlsbDogcmVkICFpbXBvcnRhbnQ7DQogIGZpbGwtb3BhY2l0eTogMC4yICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogcmVkICFpbXBvcnRhbnQ7DQp9DQo6ZGVlcCguaGlnaGxpZ2h0LXJlamVjdC5kanMtY29ubmVjdGlvbiA+IC5kanMtdmlzdWFsID4gcGF0aCkgew0KICBzdHJva2U6IHJlZCAhaW1wb3J0YW50Ow0KfQ0KDQovKiog5bey5Y+W5raIICovDQouaGlnaGxpZ2h0LWNhbmNlbC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiA6bnRoLWNoaWxkKDEpIHsNCiAgZmlsbDogZ3JleSAhaW1wb3J0YW50Ow0KICBzdHJva2U6IGdyZXkgIWltcG9ydGFudDsNCiAgZmlsbC1vcGFjaXR5OiAwLjIgIWltcG9ydGFudDsNCn0NCi5oaWdobGlnaHQtY2FuY2VsLmRqcy1zaGFwZSAuZGpzLXZpc3VhbCA+IDpudGgtY2hpbGQoMikgew0KICBmaWxsOiBncmV5ICFpbXBvcnRhbnQ7DQp9DQouaGlnaGxpZ2h0LWNhbmNlbC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiBwYXRoIHsNCiAgZmlsbDogZ3JleSAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KICBzdHJva2U6IGdyZXkgIWltcG9ydGFudDsNCn0NCi5oaWdobGlnaHQtY2FuY2VsLmRqcy1jb25uZWN0aW9uID4gLmRqcy12aXN1YWwgPiBwYXRoIHsNCiAgc3Ryb2tlOiBncmV5ICFpbXBvcnRhbnQ7DQp9DQoNCi5oaWdobGlnaHQtY2FuY2VsOm5vdCguZGpzLWNvbm5lY3Rpb24pIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgxKSB7DQogIGZpbGw6IGdyZXkgIWltcG9ydGFudDsgLyogY29sb3IgZWxlbWVudHMgYXMgZ3JlZW4gKi8NCn0NCg0KOmRlZXAoLmhpZ2hsaWdodC1jYW5jZWwuZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgxKSkgew0KICBmaWxsOiBncmV5ICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogZ3JleSAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KfQ0KOmRlZXAoLmhpZ2hsaWdodC1jYW5jZWwuZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgyKSkgew0KICBmaWxsOiBncmV5ICFpbXBvcnRhbnQ7DQp9DQo6ZGVlcCguaGlnaGxpZ2h0LWNhbmNlbC5kanMtc2hhcGUgLmRqcy12aXN1YWwgPiBwYXRoKSB7DQogIGZpbGw6IGdyZXkgIWltcG9ydGFudDsNCiAgZmlsbC1vcGFjaXR5OiAwLjIgIWltcG9ydGFudDsNCiAgc3Ryb2tlOiBncmV5ICFpbXBvcnRhbnQ7DQp9DQo6ZGVlcCguaGlnaGxpZ2h0LWNhbmNlbC5kanMtY29ubmVjdGlvbiA+IC5kanMtdmlzdWFsID4gcGF0aCkgew0KICBzdHJva2U6IGdyZXkgIWltcG9ydGFudDsNCn0NCi8qKumps+WbniAqLw0KLmhpZ2hsaWdodC1iYWNrLmRqcy1jb25uZWN0aW9uID4gLmRqcy12aXN1YWwgPiBwYXRoIHsNCiAgc3Ryb2tlOiAjRkZCQTAwICFpbXBvcnRhbnQ7DQogIHN0cm9rZS1kYXNoYXJyYXk6IDRweCAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KfQ0KDQouaGlnaGxpZ2h0LWJhY2suZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgxKSB7DQogIGZpbGw6ICNGRkJBMDAgIWltcG9ydGFudDsNCiAgc3Ryb2tlOiAjRkZCQTAwICFpbXBvcnRhbnQ7DQogIHN0cm9rZS1kYXNoYXJyYXk6IDRweCAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KfQ0KDQo6ZGVlcCguaGlnaGxpZ2h0LWJhY2suZGpzLWNvbm5lY3Rpb24gPiAuZGpzLXZpc3VhbCA+IHBhdGgpIHsNCiAgc3Ryb2tlOiAjRkZCQTAwICFpbXBvcnRhbnQ7DQogIHN0cm9rZS1kYXNoYXJyYXk6IDRweCAhaW1wb3J0YW50Ow0KICBmaWxsLW9wYWNpdHk6IDAuMiAhaW1wb3J0YW50Ow0KICBtYXJrZXItZW5kOiB1cmwoI3NlcXVlbmNlZmxvdy1lbmQtX0U3REZERi1fRTdERkRGLTgwM2cxa2Y2end6bWNpZzF5MnVsbTVlZ3IpOw0KfQ0KDQo6ZGVlcCguaGlnaGxpZ2h0LWJhY2suZGpzLXNoYXBlIC5kanMtdmlzdWFsID4gOm50aC1jaGlsZCgxKSkgew0KICBmaWxsOiAjRkZCQTAwICFpbXBvcnRhbnQ7DQogIHN0cm9rZTogI0ZGQkEwMCAhaW1wb3J0YW50Ow0KICBzdHJva2UtZGFzaGFycmF5OiA0cHggIWltcG9ydGFudDsNCiAgZmlsbC1vcGFjaXR5OiAwLjIgIWltcG9ydGFudDsNCn0NCi5lbGVtZW50LW92ZXJsYXlzIHsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgcGFkZGluZzogOHB4Ow0KICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNik7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCiAgY29sb3I6ICNmYWZhZmE7DQogIHdpZHRoOiAyMDBweDsNCn0NCg=="},{"version":3,"sources":["ProcessViewer.vue"],"names":[],"mappings":";;AAmfile":"ProcessViewer.vue","sourceRoot":"src/components/bpmnProcessDesigner/package/designer","sourcesContent":["<template>\r\n  <div class=\"my-process-designer\">\r\n    <div class=\"my-process-designer__container\">\r\n      <div class=\"my-process-designer__canvas\" ref=\"bpmn-canvas\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BpmnViewer from \"bpmn-js/lib/Viewer\";\r\nimport DefaultEmptyXML from \"./plugins/defaultEmpty\";\r\n\r\nexport default {\r\n  name: \"MyProcessViewer\",\r\n  componentName: \"MyProcessViewer\",\r\n  props: {\r\n    value: {  // BPMN XML 字符串\r\n      type: String,\r\n    },\r\n    prefix: { // 使用哪个引擎\r\n      type: String,\r\n      default: \"camunda\",\r\n    },\r\n    activityData: { // 活动的数据。传递时，可高亮流程\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    processInstanceData: { // 流程实例的数据。传递时，可展示流程发起人等信息\r\n      type: Object,\r\n    },\r\n    taskData: { // 任务实例的数据。传递时，可展示 UserTask 审核相关的信息\r\n      type: Array,\r\n      default: () => [],\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      xml: '',\r\n      activityList: [],\r\n      processInstance: undefined,\r\n      taskList: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.xml = this.value;\r\n    this.activityList = this.activityData;\r\n    // 初始化\r\n    this.initBpmnModeler();\r\n    this.createNewDiagram(this.xml);\r\n    this.$once(\"hook:beforeDestroy\", () => {\r\n      if (this.bpmnModeler) this.bpmnModeler.destroy();\r\n      this.$emit(\"destroy\", this.bpmnModeler);\r\n      this.bpmnModeler = null;\r\n    });\r\n    // 初始模型的监听器\r\n    this.initModelListeners();\r\n  },\r\n  watch: {\r\n    value: function (newValue) { // 在 xmlString 发生变化时，重新创建，从而绘制流程图\r\n      this.xml = newValue;\r\n      this.createNewDiagram(this.xml);\r\n    },\r\n    activityData: function (newActivityData) {\r\n      this.activityList = newActivityData;\r\n      this.createNewDiagram(this.xml);\r\n    },\r\n    processInstanceData: function (newProcessInstanceData) {\r\n      this.processInstance = newProcessInstanceData;\r\n      this.createNewDiagram(this.xml);\r\n    },\r\n    taskData: function (newTaskListData) {\r\n      this.taskList = newTaskListData;\r\n      this.createNewDiagram(this.xml);\r\n    }\r\n  },\r\n  methods: {\r\n    initBpmnModeler() {\r\n      if (this.bpmnModeler) return;\r\n      this.bpmnModeler = new BpmnViewer({\r\n        container: this.$refs[\"bpmn-canvas\"],\r\n        bpmnRenderer: {\r\n        }\r\n      })\r\n    },\r\n    /* 创建新的流程图 */\r\n    async createNewDiagram(xml) {\r\n      // 将字符串转换成图显示出来\r\n      let newId = `Process_${new Date().getTime()}`;\r\n      let newName = `业务流程_${new Date().getTime()}`;\r\n      let xmlString = xml || DefaultEmptyXML(newId, newName, this.prefix);\r\n      try {\r\n        // console.log(this.bpmnModeler.importXML);\r\n        let { warnings } = await this.bpmnModeler.importXML(xmlString);\r\n        if (warnings && warnings.length) {\r\n          warnings.forEach(warn => console.warn(warn));\r\n        }\r\n        // 高亮流程图\r\n        await this.highlightDiagram();\r\n        const canvas = this.bpmnModeler.get('canvas');\r\n        canvas.zoom(\"fit-viewport\", \"auto\");\r\n      } catch (e) {\r\n        console.error(e);\r\n        // console.error(`[Process Designer Warn]: ${e?.message || e}`);\r\n      }\r\n    },\r\n    /* 高亮流程图 */\r\n    // TODO 芋艿：如果多个 endActivity 的话，目前的逻辑可能有一定的问题。https://www.jdon.com/workflow/multi-events.html\r\n    async highlightDiagram() {\r\n      const activityList = this.activityList;\r\n      if (activityList.length === 0) {\r\n        return;\r\n      }\r\n      // 参考自 https://gitee.com/tony2y/RuoYi-flowable/blob/master/ruoyi-ui/src/components/Process/index.vue#L222 实现\r\n      // 再次基础上，增加不同审批结果的颜色等等\r\n      let canvas = this.bpmnModeler.get('canvas');\r\n      let todoActivity = activityList.find(m => !m.endTime) // 找到待办的任务\r\n      let endActivity = activityList[activityList.length - 1] // 获得最后一个任务\r\n      // debugger\r\n      // console.log(this.bpmnModeler.getDefinitions().rootElements[0].flowElements);\r\n      this.bpmnModeler.getDefinitions().rootElements[0].flowElements?.forEach(n => {\r\n        let activity = activityList.find(m => m.key === n.id) // 找到对应的活动\r\n        if (!activity) {\r\n          return;\r\n        }\r\n        if (n.$type === 'bpmn:UserTask') { // 用户任务\r\n          // 处理用户任务的高亮\r\n          const task = this.taskList.find(m => m.id === activity.taskId); // 找到活动对应的 taskId\r\n          if (!task) {\r\n            return;\r\n          }\r\n          // 高亮任务\r\n          canvas.addMarker(n.id, this.getResultCss(task.result));\r\n\r\n          // 如果非通过，就不走后面的线条了\r\n          if (task.result !== 2) {\r\n            return;\r\n          }\r\n          // 处理 outgoing 出线\r\n          const outgoing = this.getActivityOutgoing(activity);\r\n          outgoing?.forEach(nn => {\r\n            // debugger\r\n            let targetActivity = activityList.find(m => m.key === nn.targetRef.id)\r\n            // 如果目标活动存在，则根据该活动是否结束，进行【bpmn:SequenceFlow】连线的高亮设置\r\n            if (targetActivity) {\r\n              canvas.addMarker(nn.id, targetActivity.endTime ? 'highlight' : 'highlight-todo');\r\n            } else if (nn.targetRef.$type === 'bpmn:ExclusiveGateway') { // TODO 芋艿：这个流程，暂时没走到过\r\n              canvas.addMarker(nn.id, activity.endTime ? 'highlight' : 'highlight-todo');\r\n              canvas.addMarker(nn.targetRef.id, activity.endTime ? 'highlight' : 'highlight-todo');\r\n            } else if (nn.targetRef.$type === 'bpmn:EndEvent') { // TODO 芋艿：这个流程，暂时没走到过\r\n              if (!todoActivity && endActivity.key === n.id) {\r\n                canvas.addMarker(nn.id, 'highlight');\r\n                canvas.addMarker(nn.targetRef.id, 'highlight');\r\n              }\r\n              if (!activity.endTime) {\r\n                canvas.addMarker(nn.id, 'highlight-todo');\r\n                canvas.addMarker(nn.targetRef.id, 'highlight-todo');\r\n              }\r\n            }\r\n          });\r\n        } else if (n.$type === 'bpmn:ExclusiveGateway') { // 排它网关\r\n          // 设置【bpmn:ExclusiveGateway】排它网关的高亮\r\n          canvas.addMarker(n.id, this.getActivityHighlightCss(activity));\r\n          // 查找需要高亮的连线\r\n          let matchNN = undefined;\r\n          let matchActivity = undefined;\r\n          n.outgoing?.forEach(nn => {\r\n            let targetActivity = activityList.find(m => m.key === nn.targetRef.id);\r\n            if (!targetActivity) {\r\n              return;\r\n            }\r\n            // 特殊判断 endEvent 类型的原因，ExclusiveGateway 可能后续连有 2 个路径：\r\n            //  1. 一个是 UserTask => EndEvent\r\n            //  2. 一个是 EndEvent\r\n            // 在选择路径 1 时，其实 EndEvent 可能也存在，导致 1 和 2 都高亮，显然是不正确的。\r\n            // 所以，在 matchActivity 为 EndEvent 时，需要进行覆盖~~\r\n            if (!matchActivity || matchActivity.type === 'endEvent') {\r\n              matchNN = nn;\r\n              matchActivity = targetActivity;\r\n            }\r\n          })\r\n          if (matchNN && matchActivity) {\r\n            canvas.addMarker(matchNN.id, this.getActivityHighlightCss(matchActivity));\r\n          }\r\n        } else if (n.$type === 'bpmn:ParallelGateway') { // 并行网关\r\n          // 设置【bpmn:ParallelGateway】并行网关的高亮\r\n          canvas.addMarker(n.id, this.getActivityHighlightCss(activity));\r\n          n.outgoing?.forEach(nn => {\r\n            // 获得连线是否有指向目标。如果有，则进行高亮\r\n            const targetActivity = activityList.find(m => m.key === nn.targetRef.id)\r\n            if (targetActivity) {\r\n              canvas.addMarker(nn.id, this.getActivityHighlightCss(targetActivity)); // 高亮【bpmn:SequenceFlow】连线\r\n              // 高亮【...】目标。其中 ... 可以是 bpm:UserTask、也可以是其它的。当然，如果是 bpm:UserTask 的话，其实不做高亮也没问题，因为上面有逻辑做了这块。\r\n              canvas.addMarker(nn.targetRef.id, this.getActivityHighlightCss(targetActivity));\r\n            }\r\n          })\r\n        } else if (n.$type === 'bpmn:StartEvent') { // 开始节点\r\n          n.outgoing?.forEach(nn => { // outgoing 例如说【bpmn:SequenceFlow】连线\r\n            // 获得连线是否有指向目标。如果有，则进行高亮\r\n            let targetActivity = activityList.find(m => m.key === nn.targetRef.id);\r\n            if (targetActivity) {\r\n              canvas.addMarker(nn.id, 'highlight'); // 高亮【bpmn:SequenceFlow】连线\r\n              canvas.addMarker(n.id, 'highlight'); // 高亮【bpmn:StartEvent】开始节点（自己）\r\n            }\r\n          });\r\n        } else if (n.$type === 'bpmn:EndEvent') { // 结束节点\r\n          if (!this.processInstance || this.processInstance.result === 1) {\r\n            return;\r\n          }\r\n          canvas.addMarker(n.id, this.getResultCss(this.processInstance.result));\r\n        } else if (n.$type === 'bpmn:ServiceTask'){ //服务任务\r\n          if(activity.startTime>0 && activity.endTime===0){//进入执行，标识进行色\r\n            canvas.addMarker(n.id, this.getResultCss(1));\r\n          }\r\n          if(activity.endTime>0){// 执行完成，节点标识完成色, 所有outgoing标识完成色。\r\n            canvas.addMarker(n.id, this.getResultCss(2));\r\n            const outgoing = this.getActivityOutgoing(activity)\r\n            outgoing?.forEach(out=>{\r\n              canvas.addMarker(out.id,this.getResultCss(2))\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getActivityHighlightCss(activity) {\r\n      return activity.endTime ? 'highlight' : 'highlight-todo';\r\n    },\r\n    getResultCss(result) {\r\n      if (result === 1) { // 审批中\r\n        return 'highlight-todo';\r\n      } else if (result === 2) { // 已通过\r\n        return 'highlight';\r\n      } else if (result === 3) { // 不通过\r\n        return 'highlight-reject';\r\n      } else if (result === 4) { // 已取消\r\n        return 'highlight-cancel';\r\n      } else if (result === 5) { // 已退回\r\n        return 'highlight-back';\r\n      } else if (result === 6) { // 已委派\r\n        return 'highlight-todo';\r\n      }\r\n      return '';\r\n    },\r\n    getActivityOutgoing(activity) {\r\n      // 如果有 outgoing，则直接使用它\r\n      if (activity.outgoing && activity.outgoing.length > 0) {\r\n        return activity.outgoing;\r\n      }\r\n      // 如果没有，则遍历获得起点为它的【bpmn:SequenceFlow】节点们。原因是：bpmn-js 的 UserTask 拿不到 outgoing\r\n      const flowElements = this.bpmnModeler.getDefinitions().rootElements[0].flowElements;\r\n      const outgoing = [];\r\n      flowElements.forEach(item => {\r\n        if (item.$type !== 'bpmn:SequenceFlow') {\r\n          return;\r\n        }\r\n        if (item.sourceRef.id === activity.key) {\r\n          outgoing.push(item);\r\n        }\r\n      });\r\n      return outgoing;\r\n    },\r\n    initModelListeners() {\r\n      const EventBus = this.bpmnModeler.get(\"eventBus\");\r\n      const that = this;\r\n      // 注册需要的监听事件\r\n      EventBus.on('element.hover', function(eventObj) {\r\n        let element = eventObj ? eventObj.element : null;\r\n        that.elementHover(element);\r\n      });\r\n      EventBus.on('element.out', function(eventObj) {\r\n        let element = eventObj ? eventObj.element : null;\r\n        that.elementOut(element);\r\n      });\r\n    },\r\n    // 流程图的元素被 hover\r\n    elementHover(element) {\r\n      this.element = element;\r\n      !this.elementOverlayIds && (this.elementOverlayIds = {});\r\n      !this.overlays && (this.overlays = this.bpmnModeler.get(\"overlays\"));\r\n      // 展示信息\r\n      const activity = this.activityList.find(m => m.key === element.id);\r\n      if (!activity) {\r\n        return;\r\n      }\r\n      if (!this.elementOverlayIds[element.id] && element.type !== \"bpmn:Process\") {\r\n        let html = `<div class=\"element-overlays\">\r\n            <p>Elemet id: ${element.id}</p>\r\n            <p>Elemet type: ${element.type}</p>\r\n          </div>`; // 默认值\r\n        if (element.type === 'bpmn:StartEvent' && this.processInstance) {\r\n          html = `<p>发起人：${this.processInstance.startUser.nickname}</p>\r\n                  <p>部门：${this.processInstance.startUser.deptName}</p>\r\n                  <p>创建时间：${this.parseTime(this.processInstance.createTime)}`;\r\n        } else if (element.type === 'bpmn:UserTask') {\r\n          // debugger\r\n          let task = this.taskList.find(m => m.id === activity.taskId); // 找到活动对应的 taskId\r\n          if (!task) {\r\n            return;\r\n          }\r\n          html = `<p>审批人：${task.assigneeUser.nickname}</p>\r\n                  <p>部门：${task.assigneeUser.deptName}</p>\r\n                  <p>结果：${this.getDictDataLabel(this.DICT_TYPE.BPM_PROCESS_INSTANCE_RESULT, task.result)}</p>\r\n                  <p>创建时间：${this.parseTime(task.createTime)}</p>`;\r\n          if (task.endTime) {\r\n            html += `<p>结束时间：${this.parseTime(task.endTime)}</p>`\r\n          }\r\n          if (task.reason) {\r\n            html += `<p>审批建议：${task.reason}</p>`\r\n          }\r\n        } else if (element.type === 'bpmn:ServiceTask' && this.processInstance) {\r\n          if(activity.startTime>0){\r\n            html = `<p>创建时间：${this.parseTime(activity.startTime)}</p>`;\r\n          }\r\n          if(activity.endTime>0){\r\n            html += `<p>结束时间：${this.parseTime(activity.endTime)}</p>`\r\n          }\r\n          console.log(html)\r\n        } else if (element.type === 'bpmn:EndEvent' && this.processInstance) {\r\n          html = `<p>结果：${this.getDictDataLabel(this.DICT_TYPE.BPM_PROCESS_INSTANCE_RESULT, this.processInstance.result)}</p>`;\r\n          if (this.processInstance.endTime) {\r\n            html += `<p>结束时间：${this.parseTime(this.processInstance.endTime)}</p>`\r\n          }\r\n        }\r\n        this.elementOverlayIds[element.id] = this.overlays.add(element, {\r\n          position: { left: 0, bottom: 0 },\r\n          html: `<div class=\"element-overlays\">${html}</div>`\r\n        });\r\n      }\r\n    },\r\n    // 流程图的元素被 out\r\n    elementOut(element) {\r\n      this.overlays.remove({ element });\r\n      this.elementOverlayIds[element.id] = null;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n/** 处理中 */\r\n.highlight-todo.djs-connection > .djs-visual > path {\r\n  stroke: #1890ff !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n.highlight-todo.djs-shape .djs-visual > :nth-child(1) {\r\n  fill: #1890ff !important;\r\n  stroke: #1890ff !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n\r\n:deep(.highlight-todo.djs-connection > .djs-visual > path) {\r\n  stroke: #1890ff !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n  marker-end: url(#sequenceflow-end-_E7DFDF-_E7DFDF-803g1kf6zwzmcig1y2ulm5egr);\r\n}\r\n:deep(.highlight-todo.djs-shape .djs-visual > :nth-child(1)) {\r\n  fill: #1890ff !important;\r\n  stroke: #1890ff !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n\r\n/** 通过 */\r\n.highlight.djs-shape .djs-visual > :nth-child(1) {\r\n  fill: green !important;\r\n  stroke: green !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n.highlight.djs-shape .djs-visual > :nth-child(2) {\r\n  fill: green !important;\r\n}\r\n.highlight.djs-shape .djs-visual > path {\r\n  fill: green !important;\r\n  fill-opacity: 0.2 !important;\r\n  stroke: green !important;\r\n}\r\n.highlight.djs-connection > .djs-visual > path {\r\n  stroke: green !important;\r\n}\r\n\r\n.highlight:not(.djs-connection) .djs-visual > :nth-child(1) {\r\n  fill: green !important; /* color elements as green */\r\n}\r\n\r\n:deep(.highlight.djs-shape .djs-visual > :nth-child(1)) {\r\n  fill: green !important;\r\n  stroke: green !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n:deep(.highlight.djs-shape .djs-visual > :nth-child(2)) {\r\n  fill: green !important;\r\n}\r\n:deep(.highlight.djs-shape .djs-visual > path) {\r\n  fill: green !important;\r\n  fill-opacity: 0.2 !important;\r\n  stroke: green !important;\r\n}\r\n:deep(.highlight.djs-connection > .djs-visual > path) {\r\n  stroke: green !important;\r\n}\r\n\r\n/** 不通过 */\r\n.highlight-reject.djs-shape .djs-visual > :nth-child(1) {\r\n  fill: red !important;\r\n  stroke: red !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n.highlight-reject.djs-shape .djs-visual > :nth-child(2) {\r\n  fill: red !important;\r\n}\r\n.highlight-reject.djs-shape .djs-visual > path {\r\n  fill: red !important;\r\n  fill-opacity: 0.2 !important;\r\n  stroke: red !important;\r\n}\r\n.highlight-reject.djs-connection > .djs-visual > path {\r\n  stroke: red !important;\r\n}\r\n\r\n.highlight-reject:not(.djs-connection) .djs-visual > :nth-child(1) {\r\n  fill: red !important; /* color elements as green */\r\n}\r\n\r\n:deep(.highlight-reject.djs-shape .djs-visual > :nth-child(1)) {\r\n  fill: red !important;\r\n  stroke: red !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n:deep(.highlight-reject.djs-shape .djs-visual > :nth-child(2)) {\r\n  fill: red !important;\r\n}\r\n:deep(.highlight-reject.djs-shape .djs-visual > path) {\r\n  fill: red !important;\r\n  fill-opacity: 0.2 !important;\r\n  stroke: red !important;\r\n}\r\n:deep(.highlight-reject.djs-connection > .djs-visual > path) {\r\n  stroke: red !important;\r\n}\r\n\r\n/** 已取消 */\r\n.highlight-cancel.djs-shape .djs-visual > :nth-child(1) {\r\n  fill: grey !important;\r\n  stroke: grey !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n.highlight-cancel.djs-shape .djs-visual > :nth-child(2) {\r\n  fill: grey !important;\r\n}\r\n.highlight-cancel.djs-shape .djs-visual > path {\r\n  fill: grey !important;\r\n  fill-opacity: 0.2 !important;\r\n  stroke: grey !important;\r\n}\r\n.highlight-cancel.djs-connection > .djs-visual > path {\r\n  stroke: grey !important;\r\n}\r\n\r\n.highlight-cancel:not(.djs-connection) .djs-visual > :nth-child(1) {\r\n  fill: grey !important; /* color elements as green */\r\n}\r\n\r\n:deep(.highlight-cancel.djs-shape .djs-visual > :nth-child(1)) {\r\n  fill: grey !important;\r\n  stroke: grey !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n:deep(.highlight-cancel.djs-shape .djs-visual > :nth-child(2)) {\r\n  fill: grey !important;\r\n}\r\n:deep(.highlight-cancel.djs-shape .djs-visual > path) {\r\n  fill: grey !important;\r\n  fill-opacity: 0.2 !important;\r\n  stroke: grey !important;\r\n}\r\n:deep(.highlight-cancel.djs-connection > .djs-visual > path) {\r\n  stroke: grey !important;\r\n}\r\n/**驳回 */\r\n.highlight-back.djs-connection > .djs-visual > path {\r\n  stroke: #FFBA00 !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n\r\n.highlight-back.djs-shape .djs-visual > :nth-child(1) {\r\n  fill: #FFBA00 !important;\r\n  stroke: #FFBA00 !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n\r\n:deep(.highlight-back.djs-connection > .djs-visual > path) {\r\n  stroke: #FFBA00 !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n  marker-end: url(#sequenceflow-end-_E7DFDF-_E7DFDF-803g1kf6zwzmcig1y2ulm5egr);\r\n}\r\n\r\n:deep(.highlight-back.djs-shape .djs-visual > :nth-child(1)) {\r\n  fill: #FFBA00 !important;\r\n  stroke: #FFBA00 !important;\r\n  stroke-dasharray: 4px !important;\r\n  fill-opacity: 0.2 !important;\r\n}\r\n.element-overlays {\r\n  box-sizing: border-box;\r\n  padding: 8px;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  border-radius: 4px;\r\n  color: #fafafa;\r\n  width: 200px;\r\n}\r\n</style>\r\n"]}]}