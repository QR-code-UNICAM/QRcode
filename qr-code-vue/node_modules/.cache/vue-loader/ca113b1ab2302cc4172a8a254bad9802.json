{"remainingRequest":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\src\\components\\bpmnProcessDesigner\\package\\penal\\listeners\\UserTaskListeners.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\src\\components\\bpmnProcessDesigner\\package\\penal\\listeners\\UserTaskListeners.vue","mtime":1704630437718},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\89425\\IdeaProjects\\qr-code-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBjcmVhdGVMaXN0ZW5lck9iamVjdCwgdXBkYXRlRWxlbWVudEV4dGVuc2lvbnMgfSBmcm9tICIuLi8uLi91dGlscyI7DQppbXBvcnQgeyBpbml0TGlzdGVuZXJGb3JtLCBpbml0TGlzdGVuZXJUeXBlLCBldmVudFR5cGUsIGxpc3RlbmVyVHlwZSwgZmllbGRUeXBlIH0gZnJvbSAiLi91dGlsU2VsZiI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIlVzZXJUYXNrTGlzdGVuZXJzIiwNCiAgcHJvcHM6IHsNCiAgICBpZDogU3RyaW5nLA0KICAgIHR5cGU6IFN0cmluZw0KICB9LA0KICBpbmplY3Q6IHsNCiAgICBwcmVmaXg6ICJwcmVmaXgiLA0KICAgIHdpZHRoOiAid2lkdGgiDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGVsZW1lbnRMaXN0ZW5lcnNMaXN0OiBbXSwNCiAgICAgIGxpc3RlbmVyRXZlbnRUeXBlT2JqZWN0OiBldmVudFR5cGUsDQogICAgICBsaXN0ZW5lclR5cGVPYmplY3Q6IGxpc3RlbmVyVHlwZSwNCiAgICAgIGxpc3RlbmVyRm9ybU1vZGVsVmlzaWJsZTogZmFsc2UsDQogICAgICBsaXN0ZW5lckZvcm06IHt9LA0KICAgICAgZmllbGRUeXBlT2JqZWN0OiBmaWVsZFR5cGUsDQogICAgICBmaWVsZHNMaXN0T2ZMaXN0ZW5lcjogW10sDQogICAgICBsaXN0ZW5lckZpZWxkRm9ybU1vZGVsVmlzaWJsZTogZmFsc2UsIC8vIOebkeWQrOWZqCDms6jlhaXlrZfmrrXooajljZXlvLnnqpcg5pi+56S654q25oCBDQogICAgICBlZGl0aW5nTGlzdGVuZXJJbmRleDogLTEsIC8vIOebkeWQrOWZqOaJgOWcqOS4i+agh++8jC0xIOS4uuaWsOWing0KICAgICAgZWRpdGluZ0xpc3RlbmVyRmllbGRJbmRleDogLTEsIC8vIOWtl+auteaJgOWcqOS4i+agh++8jC0xIOS4uuaWsOWing0KICAgICAgbGlzdGVuZXJGaWVsZEZvcm06IHt9IC8vIOebkeWQrOWZqCDms6jlhaXlrZfmrrUg6K+m5oOF6KGo5Y2VDQogICAgfTsNCiAgfSwNCiAgd2F0Y2g6IHsNCiAgICBpZDogew0KICAgICAgaW1tZWRpYXRlOiB0cnVlLA0KICAgICAgaGFuZGxlcih2YWwpIHsNCiAgICAgICAgdmFsICYmIHZhbC5sZW5ndGggJiYgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy5yZXNldExpc3RlbmVyc0xpc3QoKSk7DQogICAgICB9DQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgcmVzZXRMaXN0ZW5lcnNMaXN0KCkgew0KICAgICAgdGhpcy5icG1uRWxlbWVudCA9IHdpbmRvdy5icG1uSW5zdGFuY2VzLmJwbW5FbGVtZW50Ow0KICAgICAgdGhpcy5vdGhlckV4dGVuc2lvbkxpc3QgPSBbXTsNCiAgICAgIHRoaXMuYnBtbkVsZW1lbnRMaXN0ZW5lcnMgPSB0aGlzLmJwbW5FbGVtZW50LmJ1c2luZXNzT2JqZWN0Py5leHRlbnNpb25FbGVtZW50cz8udmFsdWVzPy5maWx0ZXIoZXggPT4gZXguJHR5cGUgPT09IGAke3RoaXMucHJlZml4fTpUYXNrTGlzdGVuZXJgKSA/PyBbXTsNCiAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyc0xpc3QgPSB0aGlzLmJwbW5FbGVtZW50TGlzdGVuZXJzLm1hcChsaXN0ZW5lciA9PiBpbml0TGlzdGVuZXJUeXBlKGxpc3RlbmVyKSk7DQogICAgfSwNCiAgICBvcGVuTGlzdGVuZXJGb3JtKGxpc3RlbmVyLCBpbmRleCkgew0KICAgICAgaWYgKGxpc3RlbmVyKSB7DQogICAgICAgIHRoaXMubGlzdGVuZXJGb3JtID0gaW5pdExpc3RlbmVyRm9ybShsaXN0ZW5lcik7DQogICAgICAgIHRoaXMuZWRpdGluZ0xpc3RlbmVySW5kZXggPSBpbmRleDsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHRoaXMubGlzdGVuZXJGb3JtID0ge307DQogICAgICAgIHRoaXMuZWRpdGluZ0xpc3RlbmVySW5kZXggPSAtMTsgLy8g5qCH6K6w5Li65paw5aKeDQogICAgICB9DQogICAgICBpZiAobGlzdGVuZXIgJiYgbGlzdGVuZXIuZmllbGRzKSB7DQogICAgICAgIHRoaXMuZmllbGRzTGlzdE9mTGlzdGVuZXIgPSBsaXN0ZW5lci5maWVsZHMubWFwKGZpZWxkID0+ICh7IC4uLmZpZWxkLCBmaWVsZFR5cGU6IGZpZWxkLnN0cmluZyA/ICJzdHJpbmciIDogImV4cHJlc3Npb24iIH0pKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHRoaXMuZmllbGRzTGlzdE9mTGlzdGVuZXIgPSBbXTsNCiAgICAgICAgdGhpcy4kc2V0KHRoaXMubGlzdGVuZXJGb3JtLCAiZmllbGRzIiwgW10pOw0KICAgICAgfQ0KICAgICAgLy8g5omT5byA5L6n6L655qCP5bm25riF5qWa6aqM6K+B54q25oCBDQogICAgICB0aGlzLmxpc3RlbmVyRm9ybU1vZGVsVmlzaWJsZSA9IHRydWU7DQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgIGlmICh0aGlzLiRyZWZzWyJsaXN0ZW5lckZvcm1SZWYiXSkgdGhpcy4kcmVmc1sibGlzdGVuZXJGb3JtUmVmIl0uY2xlYXJWYWxpZGF0ZSgpOw0KICAgICAgfSk7DQogICAgfSwNCiAgICAvLyDnp7vpmaTnm5HlkKzlmagNCiAgICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgpIHsNCiAgICAgIHRoaXMuJGNvbmZpcm0oIuehruiupOenu+mZpOivpeebkeWQrOWZqOWQl++8nyIsICLmj5DnpLoiLCB7DQogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAi56GuIOiupCIsDQogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICLlj5Yg5raIIg0KICAgICAgfSkNCiAgICAgICAgLnRoZW4oKCkgPT4gew0KICAgICAgICAgIHRoaXMuYnBtbkVsZW1lbnRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTsNCiAgICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lcnNMaXN0LnNwbGljZShpbmRleCwgMSk7DQogICAgICAgICAgdXBkYXRlRWxlbWVudEV4dGVuc2lvbnModGhpcy5icG1uRWxlbWVudCwgdGhpcy5vdGhlckV4dGVuc2lvbkxpc3QuY29uY2F0KHRoaXMuYnBtbkVsZW1lbnRMaXN0ZW5lcnMpKTsNCiAgICAgICAgfSkNCiAgICAgICAgLmNhdGNoKCgpID0+IGNvbnNvbGUuaW5mbygi5pON5L2c5Y+W5raIIikpOw0KICAgIH0sDQogICAgLy8g5L+d5a2Y55uR5ZCs5ZmoDQogICAgYXN5bmMgc2F2ZUxpc3RlbmVyQ29uZmlnKCkgew0KICAgICAgbGV0IHZhbGlkYXRlU3RhdHVzID0gYXdhaXQgdGhpcy4kcmVmc1sibGlzdGVuZXJGb3JtUmVmIl0udmFsaWRhdGUoKTsNCiAgICAgIGlmICghdmFsaWRhdGVTdGF0dXMpIHJldHVybjsgLy8g6aqM6K+B5LiN6YCa6L+H55u05o6l6L+U5ZueDQogICAgICBjb25zdCBsaXN0ZW5lck9iamVjdCA9IGNyZWF0ZUxpc3RlbmVyT2JqZWN0KHRoaXMubGlzdGVuZXJGb3JtLCB0cnVlLCB0aGlzLnByZWZpeCk7DQogICAgICBpZiAodGhpcy5lZGl0aW5nTGlzdGVuZXJJbmRleCA9PT0gLTEpIHsNCiAgICAgICAgdGhpcy5icG1uRWxlbWVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyT2JqZWN0KTsNCiAgICAgICAgdGhpcy5lbGVtZW50TGlzdGVuZXJzTGlzdC5wdXNoKHRoaXMubGlzdGVuZXJGb3JtKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHRoaXMuYnBtbkVsZW1lbnRMaXN0ZW5lcnMuc3BsaWNlKHRoaXMuZWRpdGluZ0xpc3RlbmVySW5kZXgsIDEsIGxpc3RlbmVyT2JqZWN0KTsNCiAgICAgICAgdGhpcy5lbGVtZW50TGlzdGVuZXJzTGlzdC5zcGxpY2UodGhpcy5lZGl0aW5nTGlzdGVuZXJJbmRleCwgMSwgdGhpcy5saXN0ZW5lckZvcm0pOw0KICAgICAgfQ0KICAgICAgLy8g5L+d5a2Y5YW25LuW6YWN572uDQogICAgICB0aGlzLm90aGVyRXh0ZW5zaW9uTGlzdCA9IHRoaXMuYnBtbkVsZW1lbnQuYnVzaW5lc3NPYmplY3Q/LmV4dGVuc2lvbkVsZW1lbnRzPy52YWx1ZXM/LmZpbHRlcihleCA9PiBleC4kdHlwZSAhPT0gYCR7dGhpcy5wcmVmaXh9OlRhc2tMaXN0ZW5lcmApID8/IFtdOw0KICAgICAgdXBkYXRlRWxlbWVudEV4dGVuc2lvbnModGhpcy5icG1uRWxlbWVudCwgdGhpcy5vdGhlckV4dGVuc2lvbkxpc3QuY29uY2F0KHRoaXMuYnBtbkVsZW1lbnRMaXN0ZW5lcnMpKTsNCiAgICAgIC8vIDQuIOmakOiXj+S+p+i+ueagjw0KICAgICAgdGhpcy5saXN0ZW5lckZvcm1Nb2RlbFZpc2libGUgPSBmYWxzZTsNCiAgICAgIHRoaXMubGlzdGVuZXJGb3JtID0ge307DQogICAgfSwNCiAgICAvLyDmiZPlvIDnm5HlkKzlmajlrZfmrrXnvJbovpHlvLnnqpcNCiAgICBvcGVuTGlzdGVuZXJGaWVsZEZvcm0oZmllbGQsIGluZGV4KSB7DQogICAgICB0aGlzLmxpc3RlbmVyRmllbGRGb3JtID0gZmllbGQgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGZpZWxkKSkgOiB7fTsNCiAgICAgIHRoaXMuZWRpdGluZ0xpc3RlbmVyRmllbGRJbmRleCA9IGZpZWxkID8gaW5kZXggOiAtMTsNCiAgICAgIHRoaXMubGlzdGVuZXJGaWVsZEZvcm1Nb2RlbFZpc2libGUgPSB0cnVlOw0KICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICBpZiAodGhpcy4kcmVmc1sibGlzdGVuZXJGaWVsZEZvcm1SZWYiXSkgdGhpcy4kcmVmc1sibGlzdGVuZXJGaWVsZEZvcm1SZWYiXS5jbGVhclZhbGlkYXRlKCk7DQogICAgICB9KTsNCiAgICB9LA0KICAgIC8vIOS/neWtmOebkeWQrOWZqOazqOWFpeWtl+autQ0KICAgIGFzeW5jIHNhdmVMaXN0ZW5lckZpbGVkKCkgew0KICAgICAgbGV0IHZhbGlkYXRlU3RhdHVzID0gYXdhaXQgdGhpcy4kcmVmc1sibGlzdGVuZXJGaWVsZEZvcm1SZWYiXS52YWxpZGF0ZSgpOw0KICAgICAgaWYgKCF2YWxpZGF0ZVN0YXR1cykgcmV0dXJuOyAvLyDpqozor4HkuI3pgJrov4fnm7TmjqXov5Tlm54NCiAgICAgIGlmICh0aGlzLmVkaXRpbmdMaXN0ZW5lckZpZWxkSW5kZXggPT09IC0xKSB7DQogICAgICAgIHRoaXMuZmllbGRzTGlzdE9mTGlzdGVuZXIucHVzaCh0aGlzLmxpc3RlbmVyRmllbGRGb3JtKTsNCiAgICAgICAgdGhpcy5saXN0ZW5lckZvcm0uZmllbGRzLnB1c2godGhpcy5saXN0ZW5lckZpZWxkRm9ybSk7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLmZpZWxkc0xpc3RPZkxpc3RlbmVyLnNwbGljZSh0aGlzLmVkaXRpbmdMaXN0ZW5lckZpZWxkSW5kZXgsIDEsIHRoaXMubGlzdGVuZXJGaWVsZEZvcm0pOw0KICAgICAgICB0aGlzLmxpc3RlbmVyRm9ybS5maWVsZHMuc3BsaWNlKHRoaXMuZWRpdGluZ0xpc3RlbmVyRmllbGRJbmRleCwgMSwgdGhpcy5saXN0ZW5lckZpZWxkRm9ybSk7DQogICAgICB9DQogICAgICB0aGlzLmxpc3RlbmVyRmllbGRGb3JtTW9kZWxWaXNpYmxlID0gZmFsc2U7DQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiAodGhpcy5saXN0ZW5lckZpZWxkRm9ybSA9IHt9KSk7DQogICAgfSwNCiAgICAvLyDnp7vpmaTnm5HlkKzlmajlrZfmrrUNCiAgICByZW1vdmVMaXN0ZW5lckZpZWxkKGZpZWxkLCBpbmRleCkgew0KICAgICAgdGhpcy4kY29uZmlybSgi56Gu6K6k56e76Zmk6K+l5a2X5q615ZCX77yfIiwgIuaPkOekuiIsIHsNCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICLnoa4g6K6kIiwNCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogIuWPliDmtogiDQogICAgICB9KQ0KICAgICAgICAudGhlbigoKSA9PiB7DQogICAgICAgICAgdGhpcy5maWVsZHNMaXN0T2ZMaXN0ZW5lci5zcGxpY2UoaW5kZXgsIDEpOw0KICAgICAgICAgIHRoaXMubGlzdGVuZXJGb3JtLmZpZWxkcy5zcGxpY2UoaW5kZXgsIDEpOw0KICAgICAgICB9KQ0KICAgICAgICAuY2F0Y2goKCkgPT4gY29uc29sZS5pbmZvKCLmk43kvZzlj5bmtogiKSk7DQogICAgfQ0KICB9DQp9Ow0K"},{"version":3,"sources":["UserTaskListeners.vue"],"names":[],"mappings":";AA0LA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserTaskListeners.vue","sourceRoot":"src/components/bpmnProcessDesigner/package/penal/listeners","sourcesContent":["<template>\r\n  <div class=\"panel-tab__content\">\r\n    <el-table :data=\"elementListenersList\" size=\"mini\" border>\r\n      <el-table-column label=\"序号\" width=\"50px\" type=\"index\" />\r\n      <el-table-column label=\"事件类型\" min-width=\"80px\" show-overflow-tooltip :formatter=\"row => listenerEventTypeObject[row.event]\" />\r\n      <el-table-column label=\"事件id\" min-width=\"80px\" prop=\"id\" show-overflow-tooltip />\r\n      <el-table-column label=\"监听器类型\" min-width=\"80px\" show-overflow-tooltip :formatter=\"row => listenerTypeObject[row.listenerType]\" />\r\n      <el-table-column label=\"操作\" width=\"90px\">\r\n        <template v-slot=\"{ row, $index }\">\r\n          <el-button size=\"mini\" type=\"text\" @click=\"openListenerForm(row, $index)\">编辑</el-button>\r\n          <el-divider direction=\"vertical\" />\r\n          <el-button size=\"mini\" type=\"text\" style=\"color: #ff4d4f\" @click=\"removeListener(row, $index)\">移除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <div class=\"element-drawer__button\">\r\n      <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-plus\" @click=\"openListenerForm(null)\">添加监听器</el-button>\r\n    </div>\r\n\r\n    <!-- 监听器 编辑/创建 部分 -->\r\n    <el-drawer :visible.sync=\"listenerFormModelVisible\" title=\"任务监听器\" :size=\"`${width}px`\" append-to-body destroy-on-close>\r\n      <el-form size=\"mini\" :model=\"listenerForm\" label-width=\"96px\" ref=\"listenerFormRef\" @submit.native.prevent>\r\n        <el-form-item label=\"事件类型\" prop=\"event\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-select v-model=\"listenerForm.event\">\r\n            <el-option v-for=\"i in Object.keys(listenerEventTypeObject)\" :key=\"i\" :label=\"listenerEventTypeObject[i]\" :value=\"i\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"监听器ID\" prop=\"id\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-input v-model=\"listenerForm.id\" clearable />\r\n        </el-form-item>\r\n        <el-form-item label=\"监听器类型\" prop=\"listenerType\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-select v-model=\"listenerForm.listenerType\">\r\n            <el-option v-for=\"i in Object.keys(listenerTypeObject)\" :key=\"i\" :label=\"listenerTypeObject[i]\" :value=\"i\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item\r\n          v-if=\"listenerForm.listenerType === 'classListener'\"\r\n          label=\"Java类\"\r\n          prop=\"class\"\r\n          key=\"listener-class\"\r\n          :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerForm.class\" clearable />\r\n        </el-form-item>\r\n        <el-form-item\r\n          v-if=\"listenerForm.listenerType === 'expressionListener'\"\r\n          label=\"表达式\"\r\n          prop=\"expression\"\r\n          key=\"listener-expression\"\r\n          :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerForm.expression\" clearable />\r\n        </el-form-item>\r\n        <el-form-item\r\n          v-if=\"listenerForm.listenerType === 'delegateExpressionListener'\"\r\n          label=\"代理表达式\"\r\n          prop=\"delegateExpression\"\r\n          key=\"listener-delegate\"\r\n          :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerForm.delegateExpression\" clearable />\r\n        </el-form-item>\r\n        <template v-if=\"listenerForm.listenerType === 'scriptListener'\">\r\n          <el-form-item\r\n            label=\"脚本格式\"\r\n            prop=\"scriptFormat\"\r\n            key=\"listener-script-format\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写脚本格式' }\"\r\n          >\r\n            <el-input v-model=\"listenerForm.scriptFormat\" clearable />\r\n          </el-form-item>\r\n          <el-form-item\r\n            label=\"脚本类型\"\r\n            prop=\"scriptType\"\r\n            key=\"listener-script-type\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请选择脚本类型' }\"\r\n          >\r\n            <el-select v-model=\"listenerForm.scriptType\">\r\n              <el-option label=\"内联脚本\" value=\"inlineScript\" />\r\n              <el-option label=\"外部脚本\" value=\"externalScript\" />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item\r\n            v-if=\"listenerForm.scriptType === 'inlineScript'\"\r\n            label=\"脚本内容\"\r\n            prop=\"value\"\r\n            key=\"listener-script\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写脚本内容' }\"\r\n          >\r\n            <el-input v-model=\"listenerForm.value\" clearable />\r\n          </el-form-item>\r\n          <el-form-item\r\n            v-if=\"listenerForm.scriptType === 'externalScript'\"\r\n            label=\"资源地址\"\r\n            prop=\"resource\"\r\n            key=\"listener-resource\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写资源地址' }\"\r\n          >\r\n            <el-input v-model=\"listenerForm.resource\" clearable />\r\n          </el-form-item>\r\n        </template>\r\n\r\n        <template v-if=\"listenerForm.event === 'timeout'\">\r\n          <el-form-item label=\"定时器类型\" prop=\"eventDefinitionType\" key=\"eventDefinitionType\">\r\n            <el-select v-model=\"listenerForm.eventDefinitionType\">\r\n              <el-option label=\"日期\" value=\"date\" />\r\n              <el-option label=\"持续时长\" value=\"duration\" />\r\n              <el-option label=\"循环\" value=\"cycle\" />\r\n              <el-option label=\"无\" value=\"null\" />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item\r\n            v-if=\"!!listenerForm.eventDefinitionType && listenerForm.eventDefinitionType !== 'null'\"\r\n            label=\"定时器\"\r\n            prop=\"eventTimeDefinitions\"\r\n            key=\"eventTimeDefinitions\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写定时器配置' }\"\r\n          >\r\n            <el-input v-model=\"listenerForm.eventTimeDefinitions\" clearable />\r\n          </el-form-item>\r\n        </template>\r\n      </el-form>\r\n\r\n      <el-divider />\r\n      <p class=\"listener-filed__title\">\r\n        <span><i class=\"el-icon-menu\"></i>注入字段：</span>\r\n        <el-button size=\"mini\" type=\"primary\" @click=\"openListenerFieldForm(null)\">添加字段</el-button>\r\n      </p>\r\n      <el-table :data=\"fieldsListOfListener\" size=\"mini\" max-height=\"240\" border fit style=\"flex: none\">\r\n        <el-table-column label=\"序号\" width=\"50px\" type=\"index\" />\r\n        <el-table-column label=\"字段名称\" min-width=\"100px\" prop=\"name\" />\r\n        <el-table-column label=\"字段类型\" min-width=\"80px\" show-overflow-tooltip :formatter=\"row => fieldTypeObject[row.fieldType]\" />\r\n        <el-table-column label=\"字段值/表达式\" min-width=\"100px\" show-overflow-tooltip :formatter=\"row => row.string || row.expression\" />\r\n        <el-table-column label=\"操作\" width=\"100px\">\r\n          <template v-slot=\"{ row, $index }\">\r\n            <el-button size=\"mini\" type=\"text\" @click=\"openListenerFieldForm(row, $index)\">编辑</el-button>\r\n            <el-divider direction=\"vertical\" />\r\n            <el-button size=\"mini\" type=\"text\" style=\"color: #ff4d4f\" @click=\"removeListenerField(row, $index)\">移除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <div class=\"element-drawer__button\">\r\n        <el-button size=\"mini\" @click=\"listenerFormModelVisible = false\">取 消</el-button>\r\n        <el-button size=\"mini\" type=\"primary\" @click=\"saveListenerConfig\">保 存</el-button>\r\n      </div>\r\n    </el-drawer>\r\n\r\n    <!-- 注入西段 编辑/创建 部分 -->\r\n    <el-dialog title=\"字段配置\" :visible.sync=\"listenerFieldFormModelVisible\" width=\"600px\" append-to-body destroy-on-close>\r\n      <el-form :model=\"listenerFieldForm\" size=\"mini\" label-width=\"96px\" ref=\"listenerFieldFormRef\" style=\"height: 136px\" @submit.native.prevent>\r\n        <el-form-item label=\"字段名称：\" prop=\"name\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-input v-model=\"listenerFieldForm.name\" clearable />\r\n        </el-form-item>\r\n        <el-form-item label=\"字段类型：\" prop=\"fieldType\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-select v-model=\"listenerFieldForm.fieldType\">\r\n            <el-option v-for=\"i in Object.keys(fieldTypeObject)\" :key=\"i\" :label=\"fieldTypeObject[i]\" :value=\"i\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item\r\n          v-if=\"listenerFieldForm.fieldType === 'string'\"\r\n          label=\"字段值：\"\r\n          prop=\"string\"\r\n          key=\"field-string\"\r\n          :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerFieldForm.string\" clearable />\r\n        </el-form-item>\r\n        <el-form-item\r\n          v-if=\"listenerFieldForm.fieldType === 'expression'\"\r\n          label=\"表达式：\"\r\n          prop=\"expression\"\r\n          key=\"field-expression\"\r\n          :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerFieldForm.expression\" clearable />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template slot=\"footer\">\r\n        <el-button size=\"mini\" @click=\"listenerFieldFormModelVisible = false\">取 消</el-button>\r\n        <el-button size=\"mini\" type=\"primary\" @click=\"saveListenerFiled\">确 定</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { createListenerObject, updateElementExtensions } from \"../../utils\";\r\nimport { initListenerForm, initListenerType, eventType, listenerType, fieldType } from \"./utilSelf\";\r\n\r\nexport default {\r\n  name: \"UserTaskListeners\",\r\n  props: {\r\n    id: String,\r\n    type: String\r\n  },\r\n  inject: {\r\n    prefix: \"prefix\",\r\n    width: \"width\"\r\n  },\r\n  data() {\r\n    return {\r\n      elementListenersList: [],\r\n      listenerEventTypeObject: eventType,\r\n      listenerTypeObject: listenerType,\r\n      listenerFormModelVisible: false,\r\n      listenerForm: {},\r\n      fieldTypeObject: fieldType,\r\n      fieldsListOfListener: [],\r\n      listenerFieldFormModelVisible: false, // 监听器 注入字段表单弹窗 显示状态\r\n      editingListenerIndex: -1, // 监听器所在下标，-1 为新增\r\n      editingListenerFieldIndex: -1, // 字段所在下标，-1 为新增\r\n      listenerFieldForm: {} // 监听器 注入字段 详情表单\r\n    };\r\n  },\r\n  watch: {\r\n    id: {\r\n      immediate: true,\r\n      handler(val) {\r\n        val && val.length && this.$nextTick(() => this.resetListenersList());\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    resetListenersList() {\r\n      this.bpmnElement = window.bpmnInstances.bpmnElement;\r\n      this.otherExtensionList = [];\r\n      this.bpmnElementListeners = this.bpmnElement.businessObject?.extensionElements?.values?.filter(ex => ex.$type === `${this.prefix}:TaskListener`) ?? [];\r\n      this.elementListenersList = this.bpmnElementListeners.map(listener => initListenerType(listener));\r\n    },\r\n    openListenerForm(listener, index) {\r\n      if (listener) {\r\n        this.listenerForm = initListenerForm(listener);\r\n        this.editingListenerIndex = index;\r\n      } else {\r\n        this.listenerForm = {};\r\n        this.editingListenerIndex = -1; // 标记为新增\r\n      }\r\n      if (listener && listener.fields) {\r\n        this.fieldsListOfListener = listener.fields.map(field => ({ ...field, fieldType: field.string ? \"string\" : \"expression\" }));\r\n      } else {\r\n        this.fieldsListOfListener = [];\r\n        this.$set(this.listenerForm, \"fields\", []);\r\n      }\r\n      // 打开侧边栏并清楚验证状态\r\n      this.listenerFormModelVisible = true;\r\n      this.$nextTick(() => {\r\n        if (this.$refs[\"listenerFormRef\"]) this.$refs[\"listenerFormRef\"].clearValidate();\r\n      });\r\n    },\r\n    // 移除监听器\r\n    removeListener(listener, index) {\r\n      this.$confirm(\"确认移除该监听器吗？\", \"提示\", {\r\n        confirmButtonText: \"确 认\",\r\n        cancelButtonText: \"取 消\"\r\n      })\r\n        .then(() => {\r\n          this.bpmnElementListeners.splice(index, 1);\r\n          this.elementListenersList.splice(index, 1);\r\n          updateElementExtensions(this.bpmnElement, this.otherExtensionList.concat(this.bpmnElementListeners));\r\n        })\r\n        .catch(() => console.info(\"操作取消\"));\r\n    },\r\n    // 保存监听器\r\n    async saveListenerConfig() {\r\n      let validateStatus = await this.$refs[\"listenerFormRef\"].validate();\r\n      if (!validateStatus) return; // 验证不通过直接返回\r\n      const listenerObject = createListenerObject(this.listenerForm, true, this.prefix);\r\n      if (this.editingListenerIndex === -1) {\r\n        this.bpmnElementListeners.push(listenerObject);\r\n        this.elementListenersList.push(this.listenerForm);\r\n      } else {\r\n        this.bpmnElementListeners.splice(this.editingListenerIndex, 1, listenerObject);\r\n        this.elementListenersList.splice(this.editingListenerIndex, 1, this.listenerForm);\r\n      }\r\n      // 保存其他配置\r\n      this.otherExtensionList = this.bpmnElement.businessObject?.extensionElements?.values?.filter(ex => ex.$type !== `${this.prefix}:TaskListener`) ?? [];\r\n      updateElementExtensions(this.bpmnElement, this.otherExtensionList.concat(this.bpmnElementListeners));\r\n      // 4. 隐藏侧边栏\r\n      this.listenerFormModelVisible = false;\r\n      this.listenerForm = {};\r\n    },\r\n    // 打开监听器字段编辑弹窗\r\n    openListenerFieldForm(field, index) {\r\n      this.listenerFieldForm = field ? JSON.parse(JSON.stringify(field)) : {};\r\n      this.editingListenerFieldIndex = field ? index : -1;\r\n      this.listenerFieldFormModelVisible = true;\r\n      this.$nextTick(() => {\r\n        if (this.$refs[\"listenerFieldFormRef\"]) this.$refs[\"listenerFieldFormRef\"].clearValidate();\r\n      });\r\n    },\r\n    // 保存监听器注入字段\r\n    async saveListenerFiled() {\r\n      let validateStatus = await this.$refs[\"listenerFieldFormRef\"].validate();\r\n      if (!validateStatus) return; // 验证不通过直接返回\r\n      if (this.editingListenerFieldIndex === -1) {\r\n        this.fieldsListOfListener.push(this.listenerFieldForm);\r\n        this.listenerForm.fields.push(this.listenerFieldForm);\r\n      } else {\r\n        this.fieldsListOfListener.splice(this.editingListenerFieldIndex, 1, this.listenerFieldForm);\r\n        this.listenerForm.fields.splice(this.editingListenerFieldIndex, 1, this.listenerFieldForm);\r\n      }\r\n      this.listenerFieldFormModelVisible = false;\r\n      this.$nextTick(() => (this.listenerFieldForm = {}));\r\n    },\r\n    // 移除监听器字段\r\n    removeListenerField(field, index) {\r\n      this.$confirm(\"确认移除该字段吗？\", \"提示\", {\r\n        confirmButtonText: \"确 认\",\r\n        cancelButtonText: \"取 消\"\r\n      })\r\n        .then(() => {\r\n          this.fieldsListOfListener.splice(index, 1);\r\n          this.listenerForm.fields.splice(index, 1);\r\n        })\r\n        .catch(() => console.info(\"操作取消\"));\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}